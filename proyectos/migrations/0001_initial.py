# Generated by Django 4.2.11 on 2024-05-06 16:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import proyectos.models.proyecto


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Aplicacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_aplicacion', models.IntegerField(choices=[(1, 'corpus paralelos'), (2, 'corpus no paralelos'), (3, 'ambos tipos de corpus')], default=2, help_text='¿Esta aplicacion funciona en qué tipo de corpus?')),
                ('nombre', models.CharField(help_text='nombre de la aplicación', max_length=128, verbose_name='nombre')),
                ('icono', models.ImageField(blank=True, null=True, upload_to='iconos_aplicaciones')),
                ('explicacion', models.TextField(help_text='breve explicación de la aplicación', max_length=1024, verbose_name='explicación')),
            ],
            options={
                'verbose_name': 'aplicación',
                'verbose_name_plural': 'aplicaciones',
            },
        ),
        migrations.CreateModel(
            name='Colaborador_proyecto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_alta', models.DateTimeField(auto_now_add=True)),
                ('activo', models.BooleanField(default=True, help_text='el colaborador está activo en el proyecto')),
                ('vigencia', models.IntegerField(default=False, help_text='vigencia del colaborador dentro del proyecto')),
                ('fecha_fin_vigencia', models.DateTimeField(editable=False)),
                ('fecha_ultimo_ingreso', models.DateTimeField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Documento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archivo', models.CharField(help_text='archivo estandarizado donde se encuentra el documento en el repositorio', max_length=1024)),
                ('archivo_original', models.CharField(help_text='nombre original del archivo con el que se subió a GECO (el del usuario)', max_length=1024)),
                ('derechos', models.BooleanField(default=True, help_text='¿El documento tiene derechos de autor?')),
                ('agrupamiento', models.IntegerField(default=0)),
                ('fecha_creacion', models.DateTimeField(verbose_name='fecha de creacion')),
                ('fecha_modificacion', models.DateTimeField(blank=True, null=True, verbose_name='fecha de modificacion')),
                ('check_sum', models.IntegerField(default=0, editable=False, verbose_name='código verificador')),
            ],
            options={
                'verbose_name': 'documento',
                'verbose_name_plural': 'documentos',
                'ordering': ['proyecto', 'archivo_original'],
            },
        ),
        migrations.CreateModel(
            name='Metadato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadato', models.CharField(help_text='Metadato aplicable a un documento', max_length=128, verbose_name='metadato')),
                ('abreviacion', models.CharField(help_text='abreviación asociada al metadato', max_length=10, null=True, verbose_name='abreviación')),
                ('explicacion', models.TextField(blank=True, help_text='explicación breve de lo que significa el metadato', max_length=256, null=True, verbose_name='explicación')),
                ('es_general', models.BooleanField(default=False)),
                ('es_obligatorio_general', models.BooleanField(default=False)),
                ('es_catalogo', models.BooleanField(default=False, help_text='determina si este metadato es un catalogo')),
            ],
            options={
                'verbose_name': 'metadato',
                'verbose_name_plural': 'metadatos',
                'ordering': ['metadato'],
            },
        ),
        migrations.CreateModel(
            name='PaisUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pais', models.CharField(help_text='País dónde reside el usuario', max_length=128, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Proyecto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='nombre del proyecto para el corpus', max_length=200, unique=True, verbose_name='nombre del proyecto')),
                ('nombre_enlace', models.SlugField(max_length=200, unique=True)),
                ('descripcion', models.TextField(help_text='breve descripción del proyecto', verbose_name='descripción')),
                ('cita', models.TextField(help_text='Forma de citar el proyecto', null=True, verbose_name='cita')),
                ('repositorio', models.CharField(default=proyectos.models.proyecto.ceateRepositorioName, editable=False, max_length=256, unique=True)),
                ('activo', models.BooleanField(default=True, help_text='habilitar para indicar que el proyecto está activo')),
                ('es_publico', models.BooleanField(default=False, help_text='habilitar para indicar que el proyecto es público (privado en caso contrario)')),
                ('es_paralelo', models.BooleanField(default=False, help_text='habilitar para indicar que será un corpus paralelo')),
                ('es_colaborativo', models.BooleanField(default=False, help_text='habilitar para indicar que será un corpus colaborativo')),
                ('creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_borrado', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'proyecto',
                'verbose_name_plural': 'proyectos',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Tipo_colaboracion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(help_text='tipo de colaboración', max_length=128, unique=True, verbose_name='tipo de colaboración')),
                ('descripcion', models.CharField(help_text='descripción de las actividades de este tipo de colaborador', max_length=128, verbose_name='descripción')),
                ('duracionMeses', models.IntegerField(help_text='Establece el tiempo en que un colaborador estará activo en número de meses', null=True, verbose_name='tiempo de vigencia en meses')),
            ],
            options={
                'verbose_name': 'tipo de colaboración del documento',
                'verbose_name_plural': 'tipos de colaboración',
            },
        ),
        migrations.CreateModel(
            name='UsuarioGeco',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=128)),
                ('apellidos', models.CharField(max_length=128)),
                ('grado_academico', models.CharField(choices=[('', 'Elegir...'), ('LIC', 'Licenciatura'), ('ESP', 'Especialización'), ('MBA', 'Mestría'), ('DOC', 'Doctorado'), ('POS', 'Postdoctorado'), ('NONE', 'OTRO')], max_length=128)),
                ('institucion', models.CharField(max_length=128)),
                ('foto_perfil', models.ImageField(blank=True, default='fotosPerfil/generic.png', null=True, upload_to='fotosPerfil/')),
                ('pais', models.ForeignKey(default=13, null=True, on_delete=django.db.models.deletion.CASCADE, to='proyectos.paisusuario')),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usuario GeCo',
                'verbose_name_plural': 'Usuarios GeCo',
                'ordering': ['usuario'],
            },
        ),
        migrations.CreateModel(
            name='Proyecto_metadato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('es_obligatorio', models.BooleanField(default=False)),
                ('metadato', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metas', to='proyectos.metadato')),
                ('proyecto', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metas_proyecto', to='proyectos.proyecto')),
            ],
            options={
                'verbose_name': 'Metadatos del proyecto',
                'verbose_name_plural': 'Metadatos de los proyectos',
                'ordering': ['proyecto', 'metadato'],
            },
        ),
        migrations.CreateModel(
            name='Proyecto_aplicacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aplicacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proyecto_aplicaciones', to='proyectos.aplicacion')),
                ('proyecto', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proyecto_aplicaciones', to='proyectos.proyecto')),
            ],
        ),
        migrations.CreateModel(
            name='Proyecto_adjunto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descriptor', models.CharField(help_text='descriptor del archivo adjunto', max_length=128)),
                ('tipo', models.IntegerField(choices=[(0, 'Texto'), (1, 'Multimedia'), (2, 'Otro (pdf, doc, xls, etc')])),
                ('proyecto', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='adjunto_proyecto', to='proyectos.proyecto')),
            ],
        ),
        migrations.AddField(
            model_name='proyecto',
            name='aplicaciones',
            field=models.ManyToManyField(related_name='proyectos', through='proyectos.Proyecto_aplicacion', to='proyectos.aplicacion'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='colaboradores',
            field=models.ManyToManyField(related_name='proyectos', through='proyectos.Colaborador_proyecto', to='proyectos.usuariogeco'),
        ),
        migrations.AddField(
            model_name='proyecto',
            name='metadatos',
            field=models.ManyToManyField(related_name='proyectos', through='proyectos.Proyecto_metadato', to='proyectos.metadato'),
        ),
        migrations.CreateModel(
            name='Metadato_opcion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abreviacion', models.CharField(help_text='abreviación', max_length=10, verbose_name='abreviación')),
                ('opcion', models.CharField(help_text='opciónes disponibles', max_length=128, verbose_name='opción')),
                ('explicacion', models.TextField(blank=True, help_text='breve explicación del significado esta opción', verbose_name='explicación')),
                ('metadato', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proyectos.metadato')),
            ],
            options={
                'verbose_name': 'opcion del metadato',
                'verbose_name_plural': 'opciones del metadato',
                'ordering': ['metadato', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Documento_metadato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indice', models.IntegerField(blank=True, help_text='indice de la opción correspondiente al metadato asociado para el documento', verbose_name='indice')),
                ('valor', models.CharField(blank=True, default='', help_text='Valor asignado al metadato para el documento', max_length=256, verbose_name='valor')),
                ('documento', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documento_metadatos', to='proyectos.documento')),
                ('proyecto_metadato', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documento_metadatos', to='proyectos.proyecto_metadato')),
            ],
            options={
                'verbose_name': 'metadato del documento',
                'verbose_name_plural': 'metadatos del documento',
            },
        ),
        migrations.AddField(
            model_name='documento',
            name='metadatos',
            field=models.ManyToManyField(related_name='documentos', through='proyectos.Documento_metadato', to='proyectos.proyecto_metadato'),
        ),
        migrations.AddField(
            model_name='documento',
            name='proyecto',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proyectos.proyecto'),
        ),
        migrations.AddField(
            model_name='documento',
            name='responsable_creacion',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responsable_creacion', to='proyectos.usuariogeco'),
        ),
        migrations.AddField(
            model_name='documento',
            name='responsable_modificacion',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responsable_modificacion', to='proyectos.usuariogeco'),
        ),
        migrations.AddField(
            model_name='colaborador_proyecto',
            name='colaborador',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='colaborador_atributos', to='proyectos.usuariogeco'),
        ),
        migrations.AddField(
            model_name='colaborador_proyecto',
            name='proyecto',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='colaborador_atributos', to='proyectos.proyecto'),
        ),
        migrations.AddField(
            model_name='colaborador_proyecto',
            name='tipo_colaborador',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proyectos.tipo_colaboracion'),
        ),
        migrations.CreateModel(
            name='Bitacora',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField(auto_now_add=True)),
                ('actividad', models.CharField(max_length=512)),
                ('nombre_proyecto', models.CharField(blank=True, max_length=256, null=True)),
                ('proyecto', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='proyectos.proyecto')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='proyectos.usuariogeco')),
            ],
        ),
        migrations.CreateModel(
            name='Archivo_adjunto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archivo_original', models.CharField(help_text='nombre del archivo', max_length=128)),
                ('archivo', models.CharField(help_text='nombre del archivo en el repositorio', max_length=128, unique=True)),
                ('derechos', models.BooleanField(default=True, help_text='¿El documento tiene derechos de autor?')),
                ('documento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archivo_adjunto_documento', to='proyectos.documento')),
                ('tipo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='archivo_adjunto_tipo', to='proyectos.proyecto_adjunto')),
            ],
            options={
                'verbose_name': 'Archivo adjunto',
                'verbose_name_plural': 'Archivos adjuntos',
                'ordering': ['archivo_original'],
            },
        ),
        migrations.AddConstraint(
            model_name='usuariogeco',
            constraint=models.UniqueConstraint(fields=('nombre', 'apellidos'), name='unique_nombre_and_apellido'),
        ),
        migrations.AddConstraint(
            model_name='proyecto_metadato',
            constraint=models.UniqueConstraint(fields=('proyecto', 'metadato'), name='unique_proyecto_metadato'),
        ),
        migrations.AddIndex(
            model_name='proyecto',
            index=models.Index(fields=['nombre'], name='proyectos_p_nombre_a27968_idx'),
        ),
        migrations.AddConstraint(
            model_name='metadato_opcion',
            constraint=models.UniqueConstraint(fields=('metadato', 'abreviacion'), name='abrevaiacion_unica'),
        ),
        migrations.AddConstraint(
            model_name='metadato_opcion',
            constraint=models.UniqueConstraint(fields=('metadato', 'opcion'), name='opcion_unica'),
        ),
        migrations.AddIndex(
            model_name='documento',
            index=models.Index(fields=['proyecto', 'archivo_original'], name='proyectos_d_proyect_5c8d56_idx'),
        ),
        migrations.AddConstraint(
            model_name='documento',
            constraint=models.UniqueConstraint(fields=('archivo_original', 'proyecto'), name='unique_file'),
        ),
        migrations.AddConstraint(
            model_name='colaborador_proyecto',
            constraint=models.UniqueConstraint(fields=('colaborador', 'proyecto'), name='unique_colaborador_proyecto'),
        ),
    ]
